package miscellaneous;

public class KthSmallestElementByMaxHeap {

	public static void main(String[] args) {
		 Integer arr[] = { 12, 3, 5, 7, 19 }; 
		 findKthSmallestElement(arr,2);

	}
	/*TimeCompalexity is O(k+(n-k)*Log(n)) which is less than o(nLog(n)) as to get max heap from 0 to k from arr(arr[0] to arr[k-1]) which will take o(k) time
	 * we will get the maxheap at arr[0] from above step...
	 * Then we have to compare arr[0] with each element of arr[k] to arr[length-1] 
	 * if we get that each element is less than arr[0] then swap arr[0] and arr[i] and apply hepify on arr[0]..
	 */
	public static void findKthSmallestElement(Integer[] arr,int k){
		int n=k-1;
		for(int i=n/2-1;i>=0;i--){
			hepify(arr,i,n);
		}
		System.out.println(arr[0]);
		for(int i=k;i<arr.length;i++){
			if(arr[0] > arr[i]){
				int temp=arr[0];
				arr[0]=arr[i];
				arr[i]=temp; 
				
				hepify(arr,0,n);
			}
			
		}
		System.out.println(arr[0]);
	}
	
	public static void hepify(Integer[] arr,int i,int n){
		int largest=i;
		int l=(2*i)+1;
		int r=(2*i)+2;
		
		if(l<=n && arr[largest] < arr[l])
			largest=l;
		if(r<=n && arr[largest] < arr[r])
			largest=r;
		
		if(largest!=i){
			int temp=arr[largest];
			arr[largest]=arr[i];
			arr[i]=temp;
			
			hepify(arr,largest,n);
		}
	}
}
